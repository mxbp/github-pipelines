---
name: Deploy to AWS App Runner
on:
  workflow_call:
    inputs:
      docker_image_name:
        required: false # TODO: true
        type: string
      docker_image_port:
        required: false
        type: number
        default: 8080
      # env_vars:
      #   required: false
      #   type: string
      #   default: default
      sandbox_environment:
        required: false
        type: string
        default: sandbox
      develop_environment:
        required: false
        type: string
        default: develop
      test_environment:
        required: false
        type: string
        default: quality_assurance
      stage_environment:
        required: false
        type: string
        default: user_acceptance_testing
      production_environment:
        required: false
        type: string
        default: production
      environment:
        required: false
        type: string
      app_runner_cpu:
        required: false
        type: number
        default: 1
      app_runner_memory:
        required: false
        type: number
        default: 2
      app_runner_variables:
        required: false
        type: string
        default: "[]"
      app_runner_secrets:
        required: false
        type: string
        default: "[]"
      aws_region:
        required: false
        type: string
        default: us-east-1
      aws_role_arn: # FIXME: arn:aws:iam::123456789012:role/my-github-actions-role
        required: false
        type: string
      zap_rules_file_name:
        required: false
        type: string
      timeout:
        required: false
        type: number
        default: 60
    secrets:
      aws_access_key_id:
        required: false
      aws_secret_access_key:
        required: false
jobs:
  identify_environment:
    name: Environment
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout }}
    outputs:
      environment: ${{ steps.identify-environment.outputs.environment }}
    steps:
      - name: Debug Info
        run: |
          echo "inputs.environment = ${{ inputs.environment }}"
      - name: Environment Identification
        id: identify-environment
        uses: mxbp/github-pipelines/identify-environment@main
        with:
          environment: ${{ inputs.environment == '' && '' || inputs.environment }}
          sandbox_environment: ${{ inputs.sandbox_environment }}
          develop_environment: ${{ inputs.develop_environment }}
          test_environment: ${{ inputs.test_environment }}
          stage_environment: ${{ inputs.stage_environment }}
          production_environment: ${{ inputs.production_environment }}
  deploy:
    name: App Runner
    needs: identify_environment
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.identify_environment.outputs.environment }}
      url: ${{ steps.deploy-aws-apprunner.outputs.service-url }}
    if: github.event_name != 'pull_request'
    outputs:
      web_app_url: ${{ steps.deploy-aws-apprunner.outputs.service-url }}
    timeout-minutes: ${{ inputs.timeout }}
    steps:
      # - name: Environment Identification
      #   id: identify-environment
      #   uses: mxbp/github-pipelines/identify-environment@main
      #   with:
      #     environment: ${{ inputs.environment }}
      - name: Check Secrets
        id: gh-check-secrets
        env:
          aws_access_key_id: ${{ secrets.aws_access_key_id }}
          aws_secret_access_key: ${{ secrets.aws_secret_access_key }}
        run: >
          {
            echo "aws_access_key_id=${{ env.aws_access_key_id != null }}";
            echo "aws_secret_access_key=${{ env.aws_secret_access_key != null }}";
          } >> "$GITHUB_OUTPUT"
      - name: Configure AWS credentials
        id: aws-config
        if: >
          inputs.aws_role_arn != null || (steps.gh-check-secrets.outputs.aws_access_key_id == 'true' &&
            steps.gh-check-secrets.outputs.aws_secret_access_key == 'true')
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ inputs.aws_region }}
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          role-to-assume: ${{ inputs.aws_role_arn }}
      - name: Deploy to App Runner
        id: deploy-aws-apprunner
        if: steps.aws-config.outcome == 'success'
        uses: awslabs/amazon-app-runner-deploy@v2.5.2
        with:
          service: ${{ github.event.repository.name }}
          image: ${{ inputs.docker_image_name }}
          port: ${{ inputs.docker_image_port }}
          access-role-arn: ${{ inputs.aws_role_arn }}
          region: ${{ inputs.aws_region }}
          cpu: ${{ inputs.app_runner_cpu }}
          memory: ${{ inputs.app_runner_memory }}
          copy-env-vars: ${{ inputs.app_runner_variables }}
          copy-secret-env-vars: ${{ inputs.app_runner_secrets }}
          wait-for-service-stability-seconds: 600
          tags: >
            {
              "Name": ${{ github.event.repository.name }},
              "Environment": ${{ inputs.environment }},
              "Provisioner": "GitHub Actions"
            }
      # TODO: Remove
      - name: Test deploy
        id: deploy
        run: echo "Test deploy"
      - name: Preparing PR for Release
        if: always()
        uses: mxbp/github-pipelines/prepare-release-pr@main
        with:
          environment: ${{ needs.identify_environment.outputs.environment }}
          deploy_status: ${{ steps.deploy.outcome }}
          test_environment: ${{ inputs.test_environment }}
          stage_environment: ${{ inputs.stage_environment }}
  dast:
    name: DAST
    needs: deploy
    if: needs.deploy.outputs.web_app_url != null
    permissions:
      issues: write
    uses: mxbp/github-pipelines/.github/workflows/dast.yml@main
    with:
      target_url: ${{ needs.deploy.outputs.web_app_url }}
      zap_rules_file_name: ${{ inputs.zap_rules_file_name }}
  # prepare_release_pr:
  #   name: Preparing PR
  #   runs-on: ubuntu-latest
  #   needs:
  #     - identify_environment
  #     - deploy
  #   if: always()
  #   timeout-minutes: ${{ inputs.timeout }}
  #   steps:
  #     - name: Preparing PR for Release
  #       uses: mxbp/github-pipelines/prepare-release-pr@main
  #       with:
  #         environment: ${{ needs.identify_environment.outputs.environment }}
  #         deploy_status: ${{ needs.deploy.result }}
