---
name: Docker
on:
  workflow_call:
    inputs:
      build_dir:
        required: false
        default: build
        type: string
      dockerfile_path:
        required: false
        type: string
        default: ./
      dockerfile_name:
        required: false
        type: string
        default: Dockerfile
      registry:
        required: false
        type: string
        default: ghcr.io
      repository:
        required: false
        type: string
        default: ${{ github.repository }}
      aws_region:
        required: false
        type: string
        default: us-east-1
      aws_role_arn:
        required: false
        type: string
      timeout:
        required: false
        type: number
        default: 60
    secrets:
      username:
        required: false
      password:
        required: false
      aws_access_key_id:
        required: false
      aws_secret_access_key:
        required: false
jobs:
  build_push:
    name: ${{ github.event_name == 'pull_request' && 'Build' || 'Build â†’ Push' }}
    runs-on: ubuntu-latest
    if: >
      github.event_name != 'workflow_dispatch' &&
      (startsWith(github.ref_name, 'release/') || startsWith(github.ref_name, 'hotfix/'))
    permissions:
      actions: read # required - for a private repository by github/codeql-action/upload-sarif to get the Action run status
      contents: write # required - anchore/sbom-action
      packages: write
      security-events: write # required - github/codeql-action/upload-sarif to upload SARIF results
      issues: write
    timeout-minutes: ${{ inputs.timeout }}
    outputs:
      image_name: ${{ steps.docker-meta.outputs.tags }}
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: app-build-${{ github.run_number }}
          # name: app-source-${{ github.run_number }}
          path: ${{ github.workspace }}
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: Setup Docker Context for Buildx
        run: docker context create ${{ github.event.repository.name }}
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          endpoint: ${{ github.event.repository.name }}
      - name: Check Secrets
        id: gh-check-secrets
        env:
          aws_access_key_id: ${{ secrets.aws_access_key_id }}
          aws_secret_access_key: ${{ secrets.aws_secret_access_key }}
        run: >
          {
            echo "aws_access_key_id=${{ env.aws_access_key_id != null }}";
            echo "aws_secret_access_key=${{ env.aws_secret_access_key != null }}";
          } >> "$GITHUB_OUTPUT"
      - name: Configure AWS credentials
        id: aws-config
        if: github.event_name != 'pull_request' && inputs.aws_role_arn != null
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ inputs.aws_region }}
          role-to-assume: ${{ inputs.aws_role_arn }}
      - name: Login to Amazon ECR
        id: aws-login
        if: steps.aws-config.outcome == 'success'
        uses: aws-actions/amazon-ecr-login@v2
      - name: Get docker meta
        id: docker-meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.aws-login.outputs.registry == null && inputs.registry || steps.aws-login.outputs.registry }}/${{ inputs.repository }}
          tags: |
            type=ref,event=branch,suffix=-${{ github.run_number }}
            type=ref,event=pr,suffix=-${{ github.run_number }}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
      - name: Login to ${{ inputs.registry }} container registry
        if: github.event_name != 'pull_request' && steps.aws-config.outcome == 'skipped'
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: >
            ${{ steps.gh-check-secrets.outputs.aws_access_key_id == 'true' && secrets.aws_access_key_id ||
              (secrets.username == null && github.actor || secrets.username) }}
          password: >
            ${{ steps.gh-check-secrets.outputs.aws_secret_access_key == 'true' && secrets.aws_secret_access_key ||
              (secrets.password == null && github.token || secrets.password) }}
      - name: Build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.dockerfile_path }}/${{ inputs.dockerfile_name }}
          load: true
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}
          platforms: linux/amd64
      - name: Anchore scan
        uses: mxbp/github-pipelines/quality-gates-anchore@main
        with:
          image: ${{ steps.docker-meta.outputs.tags }}
      # - name: Anchore - Grype scan image
      #   id: docker-scan
      #   uses: anchore/scan-action@v3
      #   with:
      #     image: ${{ steps.docker-meta.outputs.tags }}
      #     fail-build: false
      #     # severity-cutoff: medium
      # - name: Anchore - Upload SBOM scan SARIF report
      #   if: always()
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: ${{ steps.docker-scan.outputs.sarif }}
      - name: Push
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.dockerfile_path }}/${{ inputs.dockerfile_name }}
          push: true
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}
          platforms: linux/amd64
